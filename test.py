from src.glmmodel import get_model
from src.chat import Chater

# @st.cache
def init_chater():
    tokenizer, model = get_model()
    chater = Chater(tokenizer, model)
    return chater

if __name__ == '__main__':
    chater = init_chater()
    content = """
    想法啊，能不能做一个人才管理系统，然后呢，界面相当的简单啊，就是一进来呢，就是一个对话的，一个输入框文本框就和搜索引擎一样，然后呢，下面是一些具体的统计信息，比如说有多少人有多少活动，有多少人注册？有多少人带审核？哦哦哦，然后还有一些统计信息，比如说地区，比如说是行业有哪些统计，然后还有一些啊，迁徙的一些统计，然后这一些作为一个相当于一个dashboard的一个模块。

用户呢，进来啊，首先呢，就可以点击他的那个搜索窗口搜索窗口呢，会下拉给一些选项，比如说提示。So系有，然后充电活动搜活动，嗯，后比如说就这样了一个提示选项，具体，那可以参考notion的 AI 提示。那么用户呢，可以选择，具体的提示，也可以不选择他，比如说直接说了一个我要搜索某姓名是某某某某某某某的系友，然后呢，这个时后呢，就交由后面的像哈根is的a june的这样的一个or大模型，然后让他去推断具体的任务是什么，他发现a这个是搜人的任务，然后进不到so人的这个模型里头把他加入到pro人的prada里头解析出来，姓名是blah不拉拉的戏，有，然后啊，这样的往后就去给他去进行一个检索，比如说用户输入，我想穿件活动名称为什么什么的活动，那这样的话就走入到创建活动的这个流程里头，然后走充电活动的这个模型。偶尔一步一步因到用户尽量使用自然语言或者是用户战役大块文本进取就能解析出来整个的这个活动的一个结构，然后自动的填填充，完全，尽量使用户更少的进行，应该交互，全都是依靠文字和描述额，然后和语音的这种方式来去进行和完成，这个是管理端的。哦，对于c端呢，还没有太想好。
    """

    print(chater.generate(content))
